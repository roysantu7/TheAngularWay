import { Validators } from '@angular/forms';
import { FormStructure } from '../core/models/form-structure.model';
import { regExpressions } from '../util/regex';

export const ValidatorsList: FormStructure[] = [
  {
    id: 1,
    type: 'checkbox',
    label: 'Required',
    controlName: 'isRequired',
    value: false,
    isRequired: false,
    maxlength: 25,
    pattern: null,
    validatorList: [],
    hint: '',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 2,
    type: 'checkbox',
    label: 'RequiredTrue',
    controlName: 'isRequiredTrue',
    value: false,
    isRequired: false,
    maxlength: 25,
    pattern: null,
    validatorList: [],
    hint: '',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 3,
    type: 'text',
    label: 'Maxlength',
    controlName: 'maxlength',
    value: '',
    isRequired: false,
    maxlength: 25,
    pattern: regExpressions.numeric,
    validatorList: [Validators.pattern(regExpressions.numeric)],
    hint: '',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 4,
    type: 'text',
    label: 'Minlength',
    controlName: 'minlength',
    value: '',
    isRequired: false,
    maxlength: 25,
    pattern: regExpressions.numeric,
    validatorList: [Validators.pattern(regExpressions.numeric)],
    hint: '',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 5,
    type: 'text',
    label: 'Max',
    controlName: 'max',
    value: '',
    isRequired: false,
    maxlength: 25,
    pattern: regExpressions.numeric,
    validatorList: [Validators.pattern(regExpressions.numeric)],
    hint: '',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 5,
    type: 'text',
    label: 'Min',
    controlName: 'min',
    value: '',
    isRequired: false,
    maxlength: 25,
    pattern: regExpressions.numeric,
    validatorList: [Validators.pattern(regExpressions.numeric)],
    hint: '',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 6,
    type: 'text',
    label: 'Regex Pattern',
    controlName: 'pattern',
    value: '',
    isRequired: false,
    maxlength: null,
    pattern: null,
    validatorList: [],
    hint: '',
    errorMessage: 'Please enter a valid regex',
    optionList: [],
  },
];

export const optionList = [
  {
    id: 1,
    type: 'text',
    label: 'Option Label Text',
    controlName: 'name',
    value: '',
    isRequired: false,
    maxlength: 45,
    pattern: regExpressions.alpha,
    validatorList: [Validators.pattern(regExpressions.alpha)],
    hint: null,
    errorMessage: 'Please enter a valid label',
  },
  {
    id: 2,
    type: 'text',
    label: 'Option Value',
    controlName: 'value',
    value: '',
    isRequired: false,
    maxlength: 25,
    pattern: regExpressions.alpha,
    validatorList: [Validators.pattern(regExpressions.alpha)],
    hint: null,
    errorMessage: 'Please enter a valid Value',
  },
  {
    id: 3,
    type: 'checkbox',
    label: 'Default Selected',
    controlName: 'isSelected',
    value: false,
    isRequired: false,
    maxlength: 25,
    pattern: null,
    validatorList: [],
    hint: null,
    errorMessage: '',
  },
];

export const formInductionFields: FormStructure[] = [
  {
    id: 1,
    type: 'text',
    label: 'Field Control Name',
    controlName: 'controlName',
    value: '',
    isRequired: true,
    maxlength: 45,
    pattern: regExpressions.alpha,
    validatorList: [
      Validators.required,
      Validators.pattern(regExpressions.alpha),
    ],
    hint: null,
    errorMessage: 'Please enter Field Control Name',
    optionList: [],
  },
  {
    id: 2,
    type: 'text',
    label: 'Field Default Value',
    controlName: 'value',
    value: '',
    isRequired: false,
    maxlength: 100,
    pattern: regExpressions.alphaNumeric,
    validatorList: [Validators.pattern(regExpressions.alphaNumeric)],
    hint: 'This value will be rendered by default',
    errorMessage: '',
    optionList: [],
  },
  {
    id: 3,
    type: 'text',
    label: 'Field Label',
    controlName: 'label',
    value: '',
    isRequired: true,
    maxlength: 100,
    pattern: regExpressions.alphaSpace,
    validatorList: [
      Validators.required,
      Validators.pattern(regExpressions.alphaSpace),
    ],
    hint: '',
    errorMessage: 'Please enter Field Label',
    optionList: [],
  },
  {
    id: 4,
    type: 'text',
    label: 'Field Placeholder',
    controlName: 'placeholder',
    value: '',
    isRequired: false,
    maxlength: 100,
    pattern: regExpressions.alphaSpace,
    validatorList: [Validators.pattern(regExpressions.alphaSpace)],
    hint: '',
    errorMessage: 'Please enter a valid Placeholder',
    optionList: [],
  },
  {
    id: 5,
    type: 'select',
    label: 'Field Type',
    controlName: 'type',
    value: '',
    isRequired: true,
    maxlength: null,
    pattern: null,
    validatorList: [Validators.required],
    hint: '',
    errorMessage: 'Please enter Field Label',
    optionList: [
      {
        name: 'Text',
        value: 'text',
        isSelected: false,
      },
      {
        name: 'Password',
        value: 'password',
        isSelected: false,
      },
      {
        name: 'Number',
        value: 'number',
        isSelected: false,
      },
      {
        name: 'Select',
        value: 'select',
        isSelected: false,
      },
      {
        name: 'Radio',
        value: 'radio',
        isSelected: false,
      },
      {
        name: 'Checkbox',
        value: 'checkbox',
        isSelected: false,
      },
    ],
  },
  {
    id: 6,
    type: 'text',
    label: 'Field Hint',
    controlName: 'hint',
    value: '',
    isRequired: false,
    maxlength: 200,
    pattern: regExpressions.alphaNumeric,
    validatorList: [],
    hint: '',
    errorMessage: 'Please enter Field Hints',
    optionList: [],
  },
  {
    id: 7,
    type: 'text',
    label: 'Field Error Message',
    controlName: 'errorMessage',
    value: '',
    isRequired: true,
    maxlength: 200,
    pattern: null,
    validatorList: [Validators.required],
    hint: '',
    errorMessage: 'Please enter Field Error Message',
    optionList: [],
  },
  {
    id: 8,
    type: 'checkbox',
    label: 'Disabled Field',
    controlName: 'isDisabled',
    value: false,
    isRequired: false,
    maxlength: 25,
    pattern: null,
    validatorList: [],
    hint: null,
    errorMessage: '',
  },
  {
    id: 9,
    type: 'formArray',
    label: 'Field Options',
    controlName: 'optionList',
    value: '',
    isRequired: false,
    maxlength: null,
    pattern: null,
    validatorList: [],
    errorMessage: 'Please provide all options for this Field',
    hint: 'Please provide the options, if selected field type is radio or select',
    childFormDetails: optionList,
  },
  {
    id: 10,
    type: 'formGroup',
    label: 'Field Validators',
    controlName: 'validatorList',
    value: '',
    isRequired: false,
    maxlength: null,
    pattern: null,
    validatorList: [],
    errorMessage: 'Please Select Field Validators',
    hint: 'Please provide the validators for the selected field',
    childFormDetails: ValidatorsList,
  },
];

export const parentFormGroupData: FormStructure[] = [
  {
    id: 1,
    type: 'formGroup',
    label: 'Field Properties',
    controlName: 'fields',
    value: '',
    isRequired: true,
    maxlength: null,
    pattern: null,
    validatorList: [],
    hint: null,
    errorMessage: '',
    childFormDetails: formInductionFields,
  },
];

export const parentFormArrayData: FormStructure[] = [
  {
    id: 1,
    type: 'formArray',
    label: 'Field Properties',
    controlName: 'fieldArray',
    value: '',
    isRequired: true,
    maxlength: 45,
    pattern: null,
    validatorList: [],
    hint: null,
    errorMessage: '',
    childFormDetails: formInductionFields,
  },
];

export const formBaseStructure: FormStructure[] = [
    {
        id: 1,
        type: 'formGroup',
        label: 'Test Form',
        controlName: 'testForm',
        value: '',
        isRequired: null,
        isDisabled: null,
        maxlength: null,
        minlength: null,
        pattern: null,
        validatorList: null,
        hint: '',
        errorMessage: '',
        placeholder: '',
        optionList: null,
        childFormDetails: null,
      }
]

export const validatorMap = {
  isRequired: (n) => Validators.required,
  isRequiredTrue: (n) => Validators.requiredTrue,
  maxlength: (n) => Validators.maxLength(n),
  minlength: (n) => Validators.minLength(n),
  max: (n) => Validators.max(n),
  min: (n) => Validators.min(n),
  pattern: (n) => Validators.pattern(new RegExp(n)),
};
